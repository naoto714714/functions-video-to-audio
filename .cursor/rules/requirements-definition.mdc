---
description: システムの要件定義書。このファイルを逐一確認し、要件に沿った開発をしてください。
globs: 
alwaysApply: true
---
## システム要件定義書
### 1. システム概要
- Cloud Run関数で動作するシステムを作る
- 動画ファイルを音声ファイルに変換する
- `gs://im-naoto-test-bucket/inputs` に動画ファイルがアップロードされたのを検知
- `gs://im-naoto-test-bucket/outputs` に音声ファイルに変換したファイルを保存する
-  `gs://im-naoto-test-bucket/inputs` に動画ファイルは削除する

- **システム名**：`functions-video-to-audio`
- **使用言語**：Python 3.12
- **Gitリポジトリ**：git@github.com:naoto714714/functions-video-to-audio.git

### 2. ディレクトリ構成図

このプロジェクトのディレクトリ図です。

```
note_ai_crawler/
├── main.py
├── requirements.txt
├── README.md
```

## Issueドリブン開発の進め方
### 1. タスク・課題の洗い出し（Issueの作成）
1. **まずはタスクをリストアップ**
   - やるべき作業や解決したい課題を箇条書きで整理します。
   - 既に存在する要望やバグ、不具合なども含めて書き出します。

2. **Issueを作成**
   - タスクや課題ごとに、GitHubリポジトリでIssueを起票します。
   - Issueには「何をしたいか」「なぜ必要か」「完了条件（ゴール）」を明記してください。
   - `issue.md`に書き出す

3. **Issueを作成するコマンド**
   ```bash
   gh issue --title "<タイトル>" --body-file issue.md
   ```

4. **Issueを確認するコマンド**
   ```bash
   # ステータスがopenなissue一覧
   gh issue list --state open

   # 特定の issue の詳細を表示
   gh issue view <issue番号>
   ```

### 2. issue.mdの書き方
   ```md
   ### 概要
   -

   ### 詳細
   -

   ### 完了条件
   -
   ```

## 注意事項
- mainブランチでファイルを編集することは絶対に行わないこと
- gitを積極的に活用して編集履歴を細かくcommitすること
- gitの使い方は [git.mdc](mdc:.cursor/rules/git.mdc) を読むこと
